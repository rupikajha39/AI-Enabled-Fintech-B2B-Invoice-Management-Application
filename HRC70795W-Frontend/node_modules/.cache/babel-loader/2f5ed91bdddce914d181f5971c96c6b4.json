{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Rupika.LAPTOP-K3QFEE6T\\\\Downloads\\\\HRC70795W-Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"style\"];\nimport * as React from 'react';\nimport { useForkRef } from '@mui/material/utils';\nimport { useGridApiContext } from '../../utils/useGridApiContext';\nimport { useGridRootProps } from '../../utils/useGridRootProps';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridVisibleColumnDefinitionsSelector, gridColumnsTotalWidthSelector, gridColumnPositionsSelector } from '../columns/gridColumnsSelector';\nimport { gridDensityRowHeightSelector } from '../density/densitySelector';\nimport { gridFocusCellSelector, gridTabIndexCellSelector } from '../focus/gridFocusStateSelector';\nimport { gridEditRowsStateSelector } from '../editRows/gridEditRowsSelector';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { GridEvents } from '../../../models/events';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { clamp } from '../../../utils/utils';\nimport { selectedIdsLookupSelector } from '../selection/gridSelectionSelector';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { jsx as _jsx } from \"react/jsx-runtime\"; // Uses binary search to avoid looping through all possible positions\n\nexport function getIndexFromScroll(offset, positions) {\n  var sliceStart = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var sliceEnd = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : positions.length;\n\n  if (positions.length <= 0) {\n    return -1;\n  }\n\n  if (sliceStart >= sliceEnd) {\n    return sliceStart;\n  }\n\n  var pivot = sliceStart + Math.floor((sliceEnd - sliceStart) / 2);\n  var itemOffset = positions[pivot];\n  return offset <= itemOffset ? getIndexFromScroll(offset, positions, sliceStart, pivot) : getIndexFromScroll(offset, positions, pivot + 1, sliceEnd);\n}\nexport var useGridVirtualScroller = function useGridVirtualScroller(props) {\n  var _currentPage$range2;\n\n  var apiRef = useGridApiContext();\n  var rootProps = useGridRootProps();\n  var visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  var ref = props.ref,\n      disableVirtualization = props.disableVirtualization,\n      onRenderZonePositioning = props.onRenderZonePositioning,\n      _props$renderZoneMinC = props.renderZoneMinColumnIndex,\n      renderZoneMinColumnIndex = _props$renderZoneMinC === void 0 ? 0 : _props$renderZoneMinC,\n      _props$renderZoneMaxC = props.renderZoneMaxColumnIndex,\n      renderZoneMaxColumnIndex = _props$renderZoneMaxC === void 0 ? visibleColumns.length : _props$renderZoneMaxC,\n      getRowProps = props.getRowProps;\n  var columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  var columnsTotalWidth = useGridSelector(apiRef, gridColumnsTotalWidthSelector);\n  var rowHeight = useGridSelector(apiRef, gridDensityRowHeightSelector);\n  var cellFocus = useGridSelector(apiRef, gridFocusCellSelector);\n  var cellTabIndex = useGridSelector(apiRef, gridTabIndexCellSelector);\n  var rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);\n  var editRowsState = useGridSelector(apiRef, gridEditRowsStateSelector);\n  var selectedRowsLookup = useGridSelector(apiRef, selectedIdsLookupSelector);\n  var currentPage = useGridVisibleRows(apiRef, rootProps);\n  var renderZoneRef = React.useRef(null);\n  var rootRef = React.useRef(null);\n  var handleRef = useForkRef(ref, rootRef);\n\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      renderContext = _React$useState2[0],\n      setRenderContext = _React$useState2[1];\n\n  var prevRenderContext = React.useRef(renderContext);\n  var scrollPosition = React.useRef({\n    top: 0,\n    left: 0\n  });\n\n  var _React$useState3 = React.useState(null),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      containerWidth = _React$useState4[0],\n      setContainerWidth = _React$useState4[1];\n\n  var prevTotalWidth = React.useRef(columnsTotalWidth);\n  var computeRenderContext = React.useCallback(function () {\n    if (disableVirtualization) {\n      return {\n        firstRowIndex: 0,\n        lastRowIndex: currentPage.rows.length,\n        firstColumnIndex: 0,\n        lastColumnIndex: visibleColumns.length\n      };\n    }\n\n    var _scrollPosition$curre = scrollPosition.current,\n        top = _scrollPosition$curre.top,\n        left = _scrollPosition$curre.left;\n    var firstRowIndex = getIndexFromScroll(top, rowsMeta.positions);\n    var lastRowIndex = rootProps.autoHeight ? firstRowIndex + currentPage.rows.length : getIndexFromScroll(top + rootRef.current.clientHeight, rowsMeta.positions);\n    var firstColumnIndex = getIndexFromScroll(left, columnPositions);\n    var lastColumnIndex = getIndexFromScroll(left + containerWidth, columnPositions);\n    return {\n      firstRowIndex: firstRowIndex,\n      lastRowIndex: lastRowIndex,\n      firstColumnIndex: firstColumnIndex,\n      lastColumnIndex: lastColumnIndex\n    };\n  }, [disableVirtualization, rowsMeta.positions, rootProps.autoHeight, currentPage.rows.length, columnPositions, containerWidth, visibleColumns.length]);\n  React.useEffect(function () {\n    if (disableVirtualization) {\n      renderZoneRef.current.style.transform = \"translate3d(0px, 0px, 0px)\";\n    } else {\n      // TODO a scroll reset should not be necessary\n      rootRef.current.scrollLeft = 0;\n      rootRef.current.scrollTop = 0;\n    }\n  }, [disableVirtualization]);\n  React.useEffect(function () {\n    setContainerWidth(rootRef.current.clientWidth);\n  }, [rowsMeta.currentPageTotalHeight]);\n  var handleResize = React.useCallback(function () {\n    if (rootRef.current) {\n      setContainerWidth(rootRef.current.clientWidth);\n    }\n  }, []);\n  useGridApiEventHandler(apiRef, GridEvents.resize, handleResize);\n\n  var getRenderableIndexes = function getRenderableIndexes(_ref2) {\n    var firstIndex = _ref2.firstIndex,\n        lastIndex = _ref2.lastIndex,\n        buffer = _ref2.buffer,\n        minFirstIndex = _ref2.minFirstIndex,\n        maxLastIndex = _ref2.maxLastIndex;\n    return [clamp(firstIndex - buffer, minFirstIndex, maxLastIndex), clamp(lastIndex + buffer, minFirstIndex, maxLastIndex)];\n  };\n\n  var updateRenderZonePosition = React.useCallback(function (nextRenderContext) {\n    var _currentPage$range;\n\n    var _getRenderableIndexes = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: ((_currentPage$range = currentPage.range) == null ? void 0 : _currentPage$range.lastRowIndex) || 0,\n      buffer: rootProps.rowBuffer\n    }),\n        _getRenderableIndexes2 = _slicedToArray(_getRenderableIndexes, 1),\n        firstRowToRender = _getRenderableIndexes2[0];\n\n    var _getRenderableIndexes3 = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstColumnIndex,\n      lastIndex: nextRenderContext.lastColumnIndex,\n      minFirstIndex: renderZoneMinColumnIndex,\n      maxLastIndex: renderZoneMaxColumnIndex,\n      buffer: rootProps.columnBuffer\n    }),\n        _getRenderableIndexes4 = _slicedToArray(_getRenderableIndexes3, 1),\n        firstColumnToRender = _getRenderableIndexes4[0];\n\n    var top = gridRowsMetaSelector(apiRef.current.state).positions[firstRowToRender];\n    var left = gridColumnPositionsSelector(apiRef)[firstColumnToRender]; // Call directly the selector because it might be outdated when this method is called\n\n    renderZoneRef.current.style.transform = \"translate3d(\".concat(left, \"px, \").concat(top, \"px, 0px)\");\n\n    if (typeof onRenderZonePositioning === 'function') {\n      onRenderZonePositioning({\n        top: top,\n        left: left\n      });\n    }\n  }, [apiRef, (_currentPage$range2 = currentPage.range) == null ? void 0 : _currentPage$range2.lastRowIndex, onRenderZonePositioning, renderZoneMaxColumnIndex, renderZoneMinColumnIndex, rootProps.columnBuffer, rootProps.rowBuffer]);\n  var updateRenderContext = React.useCallback(function (nextRenderContext) {\n    setRenderContext(nextRenderContext);\n    updateRenderZonePosition(nextRenderContext);\n    prevRenderContext.current = nextRenderContext;\n  }, [setRenderContext, prevRenderContext, updateRenderZonePosition]);\n  React.useEffect(function () {\n    if (containerWidth == null) {\n      return;\n    }\n\n    var initialRenderContext = computeRenderContext();\n    prevRenderContext.current = initialRenderContext;\n    updateRenderContext(initialRenderContext);\n    var _scrollPosition$curre2 = scrollPosition.current,\n        top = _scrollPosition$curre2.top,\n        left = _scrollPosition$curre2.left;\n    var params = {\n      top: top,\n      left: left,\n      renderContext: initialRenderContext\n    };\n    apiRef.current.publishEvent(GridEvents.rowsScroll, params);\n  }, [apiRef, computeRenderContext, containerWidth, updateRenderContext]);\n\n  var handleScroll = function handleScroll(event) {\n    var _event$currentTarget = event.currentTarget,\n        scrollTop = _event$currentTarget.scrollTop,\n        scrollLeft = _event$currentTarget.scrollLeft;\n    scrollPosition.current.top = scrollTop;\n    scrollPosition.current.left = scrollLeft; // On iOS and macOS, negative offsets are possible when swiping past the start\n\n    if (scrollLeft < 0 || scrollTop < 0 || !prevRenderContext.current) {\n      return;\n    } // When virtualization is disabled, the context never changes during scroll\n\n\n    var nextRenderContext = disableVirtualization ? prevRenderContext.current : computeRenderContext();\n    var topRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstRowIndex - prevRenderContext.current.firstRowIndex);\n    var bottomRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastRowIndex - prevRenderContext.current.lastRowIndex);\n    var topColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstColumnIndex - prevRenderContext.current.firstColumnIndex);\n    var bottomColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastColumnIndex - prevRenderContext.current.lastColumnIndex);\n    var shouldSetState = topRowsScrolledSincePreviousRender >= rootProps.rowThreshold || bottomRowsScrolledSincePreviousRender >= rootProps.rowThreshold || topColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || bottomColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || prevTotalWidth.current !== columnsTotalWidth; // TODO v6: rename event to a wider name, it's not only fired for row scrolling\n\n    apiRef.current.publishEvent(GridEvents.rowsScroll, {\n      top: scrollTop,\n      left: scrollLeft,\n      renderContext: shouldSetState ? nextRenderContext : prevRenderContext.current\n    });\n\n    if (shouldSetState) {\n      updateRenderContext(nextRenderContext);\n      prevTotalWidth.current = columnsTotalWidth;\n    }\n  };\n\n  var getRows = function getRows() {\n    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      renderContext: renderContext\n    };\n    var nextRenderContext = params.renderContext,\n        _params$minFirstColum = params.minFirstColumn,\n        minFirstColumn = _params$minFirstColum === void 0 ? renderZoneMinColumnIndex : _params$minFirstColum,\n        _params$maxLastColumn = params.maxLastColumn,\n        maxLastColumn = _params$maxLastColumn === void 0 ? renderZoneMaxColumnIndex : _params$maxLastColumn,\n        _params$availableSpac = params.availableSpace,\n        availableSpace = _params$availableSpac === void 0 ? containerWidth : _params$availableSpac;\n\n    if (!currentPage.range || !nextRenderContext || availableSpace == null) {\n      return null;\n    }\n\n    var rowBuffer = !disableVirtualization ? rootProps.rowBuffer : 0;\n    var columnBuffer = !disableVirtualization ? rootProps.columnBuffer : 0;\n\n    var _getRenderableIndexes5 = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rowBuffer\n    }),\n        _getRenderableIndexes6 = _slicedToArray(_getRenderableIndexes5, 2),\n        firstRowToRender = _getRenderableIndexes6[0],\n        lastRowToRender = _getRenderableIndexes6[1];\n\n    var _getRenderableIndexes7 = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstColumnIndex,\n      lastIndex: nextRenderContext.lastColumnIndex,\n      minFirstIndex: minFirstColumn,\n      maxLastIndex: maxLastColumn,\n      buffer: columnBuffer\n    }),\n        _getRenderableIndexes8 = _slicedToArray(_getRenderableIndexes7, 2),\n        firstColumnToRender = _getRenderableIndexes8[0],\n        lastColumnToRender = _getRenderableIndexes8[1];\n\n    var renderedRows = currentPage.rows.slice(firstRowToRender, lastRowToRender);\n    var renderedColumns = visibleColumns.slice(firstColumnToRender, lastColumnToRender);\n    var rows = [];\n\n    for (var i = 0; i < renderedRows.length; i += 1) {\n      var _rootProps$components;\n\n      var _renderedRows$i = renderedRows[i],\n          id = _renderedRows$i.id,\n          model = _renderedRows$i.model;\n      var lastVisibleRowIndex = firstRowToRender + i === currentPage.rows.length - 1;\n      var targetRowHeight = apiRef.current.unstable_getRowHeight(id);\n      var isSelected = void 0;\n\n      if (selectedRowsLookup[id] == null) {\n        isSelected = false;\n      } else if (typeof rootProps.isRowSelectable === 'function') {\n        isSelected = rootProps.isRowSelectable(apiRef.current.getRowParams(id));\n      } else {\n        isSelected = true;\n      }\n\n      rows.push( /*#__PURE__*/_jsx(rootProps.components.Row, _extends({\n        row: model,\n        rowId: id,\n        rowHeight: targetRowHeight,\n        cellFocus: cellFocus // TODO move to inside the row\n        ,\n        cellTabIndex: cellTabIndex // TODO move to inside the row\n        ,\n        editRowsState: editRowsState // TODO move to inside the row\n        ,\n        renderedColumns: renderedColumns,\n        visibleColumns: visibleColumns,\n        firstColumnToRender: firstColumnToRender,\n        lastColumnToRender: lastColumnToRender,\n        selected: isSelected,\n        index: currentPage.range.firstRowIndex + firstRowToRender + i,\n        containerWidth: availableSpace,\n        isLastVisible: lastVisibleRowIndex\n      }, typeof getRowProps === 'function' ? getRowProps(id, model) : {}, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.row), id));\n    }\n\n    return rows;\n  };\n\n  var needsHorizontalScrollbar = containerWidth && columnsTotalWidth > containerWidth;\n  var contentSize = React.useMemo(function () {\n    // In cases where the columns exceed the available width,\n    // the horizontal scrollbar should be shown even when there're no rows.\n    // Keeping 1px as minimum height ensures that the scrollbar will visible if necessary.\n    var height = Math.max(rowsMeta.currentPageTotalHeight, 1);\n    var shouldExtendContent = false;\n\n    if (rootRef != null && rootRef.current && height <= (rootRef == null ? void 0 : rootRef.current.clientHeight)) {\n      shouldExtendContent = true;\n    }\n\n    var size = {\n      width: needsHorizontalScrollbar ? columnsTotalWidth : 'auto',\n      height: height,\n      minHeight: shouldExtendContent ? '100%' : 'auto'\n    };\n\n    if (rootProps.autoHeight && currentPage.rows.length === 0) {\n      size.height = 2 * rowHeight; // Give room to show the overlay when there's no row.\n    }\n\n    return size;\n  }, [rootRef, columnsTotalWidth, rowsMeta.currentPageTotalHeight, currentPage.rows.length, needsHorizontalScrollbar, rootProps.autoHeight, rowHeight]);\n  React.useEffect(function () {\n    apiRef.current.publishEvent(GridEvents.virtualScrollerContentSizeChange);\n  }, [apiRef, contentSize]);\n\n  if (rootProps.autoHeight && currentPage.rows.length === 0) {\n    contentSize.height = 2 * rowHeight; // Give room to show the overlay when there no rows.\n  }\n\n  var rootStyle = {};\n\n  if (!needsHorizontalScrollbar) {\n    rootStyle.overflowX = 'hidden';\n  }\n\n  var getRenderContext = React.useCallback(function () {\n    return prevRenderContext.current;\n  }, []);\n  apiRef.current.unstable_getRenderContext = getRenderContext;\n  return {\n    renderContext: renderContext,\n    updateRenderZonePosition: updateRenderZonePosition,\n    getRows: getRows,\n    getRootProps: function getRootProps() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      var _ref$style = _ref.style,\n          style = _ref$style === void 0 ? {} : _ref$style,\n          other = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n      return _extends({\n        ref: handleRef,\n        onScroll: handleScroll,\n        style: _extends({}, style, rootStyle)\n      }, other);\n    },\n    getContentProps: function getContentProps() {\n      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref3$style = _ref3.style,\n          style = _ref3$style === void 0 ? {} : _ref3$style;\n\n      return {\n        style: _extends({}, style, contentSize)\n      };\n    },\n    getRenderZoneProps: function getRenderZoneProps() {\n      return {\n        ref: renderZoneRef\n      };\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"module"}