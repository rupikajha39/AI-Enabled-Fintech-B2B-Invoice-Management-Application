{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\Rupika.LAPTOP-K3QFEE6T\\\\Downloads\\\\HRC70695W-front_end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Rupika.LAPTOP-K3QFEE6T\\\\Downloads\\\\HRC70695W-front_end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:\\\\Users\\\\Rupika.LAPTOP-K3QFEE6T\\\\Downloads\\\\HRC70695W-front_end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridCellEditing } from './useGridCellEditing.new';\nimport { GridCellModes } from '../../../models/gridEditRowModel';\nimport { useGridRowEditing } from './useGridRowEditing.new';\nexport var editingStateInitializer = function editingStateInitializer(state) {\n  return _extends({}, state, {\n    editRows: {}\n  });\n};\nexport var useGridEditing = function useGridEditing(apiRef, props) {\n  useGridCellEditing(apiRef, props);\n  useGridRowEditing(apiRef, props);\n  var debounceMap = React.useRef({});\n  var isCellEditableProp = props.isCellEditable;\n  var isCellEditable = React.useCallback(function (params) {\n    if (params.rowNode.isAutoGenerated) {\n      return false;\n    }\n\n    if (!params.colDef.editable) {\n      return false;\n    }\n\n    if (!params.colDef.renderEditCell) {\n      return false;\n    }\n\n    if (isCellEditableProp) {\n      return isCellEditableProp(params);\n    }\n\n    return true;\n  }, [isCellEditableProp]);\n\n  var maybeDebounce = function maybeDebounce(id, field, debounceMs, callback) {\n    if (!debounceMs) {\n      callback();\n      return;\n    }\n\n    if (!debounceMap.current[id]) {\n      debounceMap.current[id] = {};\n    }\n\n    if (debounceMap.current[id][field]) {\n      var _debounceMap$current$ = _slicedToArray(debounceMap.current[id][field], 1),\n          _timeout = _debounceMap$current$[0];\n\n      clearTimeout(_timeout);\n    } // To run the callback immediatelly without waiting the timeout\n\n\n    var runImmediately = function runImmediately() {\n      var _debounceMap$current$2 = _slicedToArray(debounceMap.current[id][field], 1),\n          timeout = _debounceMap$current$2[0];\n\n      clearTimeout(timeout);\n      callback();\n      delete debounceMap.current[id][field];\n    };\n\n    var timeout = setTimeout(function () {\n      callback();\n      delete debounceMap.current[id][field];\n    }, debounceMs);\n    debounceMap.current[id][field] = [timeout, runImmediately];\n  };\n\n  React.useEffect(function () {\n    var debounces = debounceMap.current;\n    return function () {\n      Object.entries(debounces).forEach(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            id = _ref2[0],\n            fields = _ref2[1];\n\n        Object.keys(fields).forEach(function (field) {\n          var _debounces$id$field = _slicedToArray(debounces[id][field], 1),\n              timeout = _debounces$id$field[0];\n\n          clearTimeout(timeout);\n          delete debounces[id][field];\n        });\n      });\n    };\n  }, []);\n  var runPendingEditCellValueMutation = React.useCallback(function (id, field) {\n    if (!debounceMap.current[id]) {\n      return;\n    }\n\n    if (!field) {\n      Object.keys(debounceMap.current[id]).forEach(function (debouncedField) {\n        var _debounceMap$current$3 = _slicedToArray(debounceMap.current[id][debouncedField], 2),\n            runCallback = _debounceMap$current$3[1];\n\n        runCallback();\n      });\n    } else if (debounceMap.current[id][field]) {\n      var _debounceMap$current$4 = _slicedToArray(debounceMap.current[id][field], 2),\n          runCallback = _debounceMap$current$4[1];\n\n      runCallback();\n    }\n  }, []);\n  var setEditCellValue = React.useCallback(function (params) {\n    var id = params.id,\n        field = params.field,\n        debounceMs = params.debounceMs;\n    return new Promise(function (resolve) {\n      maybeDebounce(id, field, debounceMs, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var setEditCellValueToCall, result;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                setEditCellValueToCall = props.editMode === 'row' ? apiRef.current.unstable_setRowEditingEditCellValue : apiRef.current.unstable_setCellEditingEditCellValue; // Check if the cell is in edit mode\n                // By the time this callback runs the user may have cancelled the editing\n\n                if (!(apiRef.current.getCellMode(id, field) === GridCellModes.Edit)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                _context.next = 4;\n                return setEditCellValueToCall(params);\n\n              case 4:\n                result = _context.sent;\n                resolve(result);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      })));\n    });\n  }, [apiRef, props.editMode]);\n  var editingSharedApi = {\n    isCellEditable: isCellEditable,\n    setEditCellValue: setEditCellValue,\n    unstable_runPendingEditCellValueMutation: runPendingEditCellValueMutation\n  };\n  useGridApiMethod(apiRef, editingSharedApi, 'EditingApi');\n};","map":null,"metadata":{},"sourceType":"module"}